version: '3'

# THESE ARE ALL THE CONTAINER CONFIGURATIONS  
services:

  # MAIN BACKEND SERVER
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8000:8000"
    command: >
      sh -c "python3 manage.py makemigrations &&
             python3 manage.py migrate && 
             python manage.py collectstatic --no-input &&
             gunicorn wallstreet24.wsgi:application --bind 0.0.0.0:8000 -w 3"
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    depends_on:
      - db
      - redis
    volumes:
      - static_files:/backend/static/

  # REDIS CONTAINER (MESSAGE BROKER)
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
  
  # CELERY WORKER TO EXECUTE BACKGROUD TASKS
  celery:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: celery
    depends_on:
      - redis
      - backend
      - db
    command: celery -A wallstreet24 worker -l info --concurrency=4
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  # CELERY BEAT WORKER TO SEND PERIODIC TASKS
  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: celery-beat
    depends_on:
      - redis
      - backend
      - celery
      - db
    command: celery -A wallstreet24 beat -l info
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  # POSTGRES DATABASE
  db:
    image: postgres
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  # NGINIX FOR LOAD BALANCING AND SERVERING STATIC FILES (REVERSE PROXY)
  nginx:
    build: ./nginx
    volumes:
      - static_files:/backend/static/
    ports:
      - "801:80"
    depends_on:
      - backend
    restart: "on-failure"

  # NGINIX AS A REVERSE PROXY (USED FOR GENERATING SSL CERTIFICATE)
  app:
    image: "jc21/nginx-proxy-manager:latest"
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt

# STATIC FILES VOLUME
volumes:
    static_files: